#include <stdio.h>
#include <string.h>
#include <stdlib.h> // Para exit() em caso de erro de alocação (não usado neste exemplo simples)
#include <float.h>  // Para DBL_MIN ou FLT_MIN se necessário (não estritamente aqui)

#define MAX_NOME 51 // 50 caracteres + '\0'
#define MAX_ALUNOS 100

struct Aluno {
    char nome[MAX_NOME];
    float nota;
};

void limparBufferEntrada() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void lerDados(struct Aluno turma[], int *num_alunos) {
    printf("Digite o número de alunos na turma (máx %d): ", MAX_ALUNOS);
    if (scanf("%d", num_alunos) != 1 || *num_alunos <= 0 || *num_alunos > MAX_ALUNOS) {
        printf("Número de alunos inválido. Definindo como 0.\n");
        *num_alunos = 0;
        limparBufferEntrada(); // Limpa o buffer caso scanf falhe ou leia um número
        return;
    }
    limparBufferEntrada();

    for (int i = 0; i < *num_alunos; i++) {
        printf("\nDados do Aluno %d:\n", i + 1);
        printf("Nome: ");
        if (fgets(turma[i].nome, MAX_NOME, stdin) != NULL) {
            turma[i].nome[strcspn(turma[i].nome, "\n")] = '\0';
        } else {
            strcpy(turma[i].nome, "Indefinido");
        }

        printf("Nota: ");
        if (scanf("%f", &turma[i].nota) != 1) {
            printf("Entrada de nota inválida. Definindo nota como 0.0.\n");
            turma[i].nota = 0.0f;
        }
        limparBufferEntrada();
    }
}

float calculaMediaTurma(const struct Aluno turma[], int num_alunos) {
    if (num_alunos == 0) {
        return 0.0f;
    }
    float soma_notas = 0.0f;
    for (int i = 0; i < num_alunos; i++) {
        soma_notas += turma[i].nota;
    }
    return soma_notas / num_alunos;
}

const char* melhorAluno(const struct Aluno turma[], int num_alunos) {
    if (num_alunos == 0) {
        return "N/A (turma vazia)";
    }
    float maior_nota = -1.0f; // Assumindo que as notas não são negativas
    int indice_melhor = 0;

    for (int i = 0; i < num_alunos; i++) {
        if (turma[i].nota > maior_nota) {
            maior_nota = turma[i].nota;
            indice_melhor = i;
        }
    }
    if (maior_nota == -1.0f && num_alunos > 0) { // Caso todos tenham nota inválida <0 ou -1
        return turma[0].nome; // Retorna o primeiro como padrão se nenhuma nota válida > -1 foi encontrada
    }
    return turma[indice_melhor].nome;
}

void imprimeResultados(int num_alunos, float media_turma, const char* nome_melhor_aluno) {
    printf("\n--- Resultados da Turma ---\n");
    printf("Número de Alunos Registrados: %d\n", num_alunos);
    if (num_alunos > 0) {
        printf("Média da Turma: %.2f\n", media_turma);
        printf("Melhor Aluno: %s\n", nome_melhor_aluno);
    } else {
        printf("Não há dados de alunos para exibir resultados.\n");
    }
    printf("---------------------------\n");
}

int main() {
    struct Aluno turma[MAX_ALUNOS];
    int num_alunos_real = 0;
    float media;
    const char* nome_do_melhor_aluno;

    lerDados(turma, &num_alunos_real);
    media = calculaMediaTurma(turma, num_alunos_real);
    nome_do_melhor_aluno = melhorAluno(turma, num_alunos_real);
    imprimeResultados(num_alunos_real, media, nome_do_melhor_aluno);

    return 0;
}