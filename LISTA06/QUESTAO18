#include <stdio.h>
#include <stdlib.h> // Para abs, embora não seja usado aqui, mas comum em matemática.
#include <math.h>   // Para pow, se você preferir (-1)^j como pow(-1, j)

// Função auxiliar para imprimir uma matriz (para demonstração)
void imprimirMatrizDouble(int n, double matriz[n][n]) {
    printf("Matriz %dx%d:\n", n, n);
    for (int i = 0; i < n; i++) {
        printf("[ ");
        for (int j = 0; j < n; j++) {
            // %7.2f para alinhar e mostrar 2 casas decimais
            printf("%7.2f ", matriz[i][j]);
        }
        printf("]\n");
    }
    printf("\n");
}

/**
 * @brief Calcula o determinante de uma matriz quadrada de forma recursiva.
 *
 * @param n A dimensão da matriz quadrada.
 * @param matriz A matriz de entrada (VLA: double matriz[n][n]).
 * @return O determinante da matriz.
 */
double calcularDeterminanteRecursivo(int n, double matriz[n][n]) {
    double determinante = 0.0;

    // Caso Base 1: Matriz 1x1
    if (n == 1) {
        return matriz[0][0];
    }

    // Caso Base 2: Matriz 2x2 (pode ser tratado pelo passo recursivo, mas explícito é mais claro/eficiente)
    if (n == 2) {
        return (matriz[0][0] * matriz[1][1]) - (matriz[0][1] * matriz[1][0]);
    }

    // Passo Recursivo: Expansão de cofatores ao longo da primeira linha para n > 2
    double sinal = 1.0; // Para alternar o sinal (+, -, +, ...)

    for (int j_cofator = 0; j_cofator < n; j_cofator++) {
        // 1. Criar a submatriz (n-1)x(n-1)
        // Esta submatriz é obtida removendo a primeira linha (linha 0)
        // e a coluna 'j_cofator' da matriz original.
        double subMatriz[n - 1][n - 1]; // VLA para a submatriz
        int sr = 0; // Índice da linha da subMatriz

        for (int r = 1; r < n; r++) { // Começa da segunda linha da matriz original (r=1)
            int sc = 0; // Índice da coluna da subMatriz
            for (int c = 0; c < n; c++) {
                if (c == j_cofator) {
                    continue; // Pula a coluna do cofator atual
                }
                subMatriz[sr][sc] = matriz[r][c];
                sc++;
            }
            sr++;
        }

        // 2. Somar o termo do cofator ao determinante total
        determinante += sinal * matriz[0][j_cofator] * calcularDeterminanteRecursivo(n - 1, subMatriz);

        // 3. Alternar o sinal para o próximo cofator
        sinal = -sinal;
    }

    return determinante;
}

int main() {
    // Exemplo de Matriz 3x3 A (determinante = 0)
    double mat3x3_A[3][3] = {
        {1.0, 2.0, 3.0},
        {4.0, 5.0, 6.0},
        {7.0, 8.0, 9.0}
    };
    // Det(A) = 1*(5*9 - 6*8) - 2*(4*9 - 6*7) + 3*(4*8 - 5*7)
    //        = 1*(45 - 48) - 2*(36 - 42) + 3*(32 - 35)
    //        = 1*(-3) - 2*(-6) + 3*(-3)
    //        = -3 + 12 - 9 = 0

    printf("Calculando determinante da Matriz A (3x3):\n");
    imprimirMatrizDouble(3, mat3x3_A);
    double detA = calcularDeterminanteRecursivo(3, mat3x3_A);
    printf("Determinante de A: %.2f\n\n", detA); // Esperado: 0.00

    // Exemplo de Matriz 3x3 B (determinante = -306)
    double mat3x3_B[3][3] = {
        {6.0, 1.0, 1.0},
        {4.0, -2.0, 5.0},
        {2.0, 8.0, 7.0}
    };
    // Det(B) = 6*(-2*7 - 5*8) - 1*(4*7 - 5*2) + 1*(4*8 - (-2)*2)
    //        = 6*(-14 - 40) - 1*(28 - 10) + 1*(32 + 4)
    //        = 6*(-54) - 1*(18) + 1*(36)
    //        = -324 - 18 + 36 = -306

    printf("Calculando determinante da Matriz B (3x3):\n");
    imprimirMatrizDouble(3, mat3x3_B);
    double detB = calcularDeterminanteRecursivo(3, mat3x3_B);
    printf("Determinante de B: %.2f\n\n", detB); // Esperado: -306.00

    // A função também funciona para outros tamanhos:
    // Exemplo de Matriz 2x2 C (determinante = -14)
    double mat2x2_C[2][2] = {
        {3.0, 8.0},
        {4.0, 6.0}
    };
    // Det(C) = 3*6 - 8*4 = 18 - 32 = -14

    printf("Calculando determinante da Matriz C (2x2):\n");
    imprimirMatrizDouble(2, mat2x2_C);
    double detC = calcularDeterminanteRecursivo(2, mat2x2_C);
    printf("Determinante de C: %.2f\n\n", detC); // Esperado: -14.00

    // Exemplo de Matriz 1x1 D (determinante = 7)
    double mat1x1_D[1][1] = {
        {7.0}
    };
    printf("Calculando determinante da Matriz D (1x1):\n");
    imprimirMatrizDouble(1, mat1x1_D);
    double detD = calcularDeterminanteRecursivo(1, mat1x1_D);
    printf("Determinante de D: %.2f\n\n", detD); // Esperado: 7.00

    return 0;
}